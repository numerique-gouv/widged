version: '3.8'

services:
  postgresql:
    image: postgres:16
    env_file:
      - env.d/development/postgresql
    ports:
      - "15433:5432"

  redis:
    image: redis:5
    ports:
        - "16379:6379"

  app-dev:
    build:
      context: .
      target: backend-development
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: widged:backend-development
    environment:
      - PYLINTHOME=/app/.pylint.d
      - DJANGO_CONFIGURATION=Development
    env_file:
      - env.d/development/common
      - env.d/development/postgresql
    ports:
      - "8071:8000"
    volumes:
      - ./src/backend:/app
      - ./data/static:/data/static
    depends_on:
        - postgresql
        - redis

  app:
    build:
      context: .
      target: backend-production
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: widged:backend-production
    environment:
      - DJANGO_CONFIGURATION=Demo
    env_file:
      - env.d/development/common
      - env.d/development/postgresql
    depends_on:
      - postgresql
      - redis

  dockerize:
    image: jwilder/dockerize

  node:
    image: node:18
    user: "${DOCKER_USER:-1000}"
    environment:
      HOME: /tmp
    volumes:
      - ".:/app"

  frontend-dev:
    user: "${DOCKER_USER:-1000}"
    build: 
      context: .
      dockerfile: ./src/frontend/Dockerfile
      target: main-dev
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend/apps/main:/home/frontend/apps/main
      - /home/frontend/node_modules/
